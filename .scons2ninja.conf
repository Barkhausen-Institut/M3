import re, os.path

scons_dependencies += rglob("Cargo.toml")

rust_files = rglob('*.rs', 'src/libs')

def ninja_post(ninja) :
    ninja.rule('mkm3fs',
        command = '$mkm3fs $out $dir $blocks $inodes $bpe',
        description = 'MKFS $out')

    ninja.rule('byacc',
        command = '$byacc $byaccflags -o $out $in',
        description = 'BYACC $out')

    ninja.rule('cargo',
        # touch the output in case cargo didn't do anything, because, e.g., a file changed that
        # cargo doesn't use. This can happen, because cargo depends on all rust files (see below).
        command = '( cd $dir && cargo $cargoflags -q --color=always ) && touch $out',
        description = 'CARGO $out')

    ninja.rule('cargocp',
        command = '( cd $dir && cargo $cargoflags -q --color=always && cp -f $cpin $cpout ) && touch $out',
        description = 'CARGO $out')

def ninja_custom_command(ninja, line) :
    cmd = os.path.splitext(os.path.basename(command[0]))[0]
    if cmd == 'mkm3fs':
        args = line.split()
        deps = rglob('*', args[2])
        deps.append(args[0])
        ninja.build(args[1], 'mkm3fs', None, deps = deps,
                    mkm3fs = args[0], dir = args[2], blocks = args[3], inodes = args[4], bpe = args[5])
        return True

    if cmd == 'byacc':
        args = line.split()
        out, flags = extract_binary_flag("-o", args[1:])
        files, flags = extract_non_flags(flags)
        ninja.build(out, 'byacc', files, byaccflags = flags, cmd = cmd)
        return True

    if os.environ['M3_TARGET'] == 'gem5' and os.environ['M3_ISA'] == 'arm':
        rustabi = 'gnueabihf'
    else:
        rustabi = 'gnu'
    subdir = os.environ['M3_ISA'] + '-unknown-' + os.environ['M3_TARGET'] + '-' + rustabi
    rustbase = os.environ['CARGO_TARGET_DIR'] + '/' + subdir + '/' + os.environ['M3_BUILD']

    m = re.match('^cd (.*?) && cargo (.*?) && cp -f (.*?) (.*)', line)
    if m:
        tname = os.path.basename(m.group(1))
        target = os.path.abspath(m.group(4) + '/' + tname)
        target = target.replace(os.environ['PWD'] + '/', '')

        # TODO do not depend on all rust files
        ninja.build(target, 'cargocp', deps = rglob('*.rs', m.group(1)) + rust_files,
            dir = m.group(1), cpin = m.group(3), cpout = m.group(4), cargoflags = m.group(2).split())
        return True

    m = re.match('^cd (.*?) && cargo (.*)', line)
    if m:
        tname = os.path.basename(m.group(1))
        target = rustbase + '/lib' + tname + '.a'
        target = target.replace(os.environ['PWD'] + '/', '')

        ninja.build(target, 'cargo', deps = rglob('*.rs', m.group(1)) + rust_files,
            dir = m.group(1), cargoflags = m.group(2).split())
        return True

    return False
