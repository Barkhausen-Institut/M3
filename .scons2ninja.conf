import re, os.path, subprocess

scons_dependencies += rglob("Cargo.toml")

def ninja_post(ninja) :
    ninja.rule('mkm3fs',
        command = '$mkm3fs $out $dir $blocks $inodes $bpe',
        description = 'MKFS $out')

    ninja.rule('byacc',
        command = '$byacc $byaccflags -o $out $in',
        description = 'BYACC $out')

    ninja.rule('cargo',
        # touch the output in case cargo didn't do anything, because, e.g., a file changed that
        # cargo doesn't use. This can happen, because cargo depends on all rust files (see below).
        command = '( cd $dir && cargo $cargoflags -q --color=always ) && touch $out',
        description = 'CARGO $out')

    ninja.rule('cargocp',
        command = '( cd $dir && cargo $cargoflags -q --color=always && cp -f $cpin $cpout ) && touch $out',
        description = 'CARGO $out')

def get_rust_deps(dir, target):
    deps = {}
    # extract dependencies from "cargo metadata" using jq
    proc = subprocess.Popen(
        "cd " + dir + " && cargo metadata --format-version 1 | "
        + "jq -r '.resolve.nodes[] as $all | $all.id | match(\"^" + target + " \") | $all.deps[].name'",
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    )
    while True:
        line = proc.stdout.readline()
        if not line:
            break
        crate = line.rstrip().decode()
        # we only care about our own rust libs
        if crate in ["base", "m3", "thread", "resmng", "paging", "pci"]:
            deps[crate] = True
            for d in get_rust_deps(dir, crate):
                deps[d] = True
    return list(deps.keys())

def get_rust_libfiles(dir, target):
    try:
        lib_files = []
        for d in get_rust_deps(dir, target):
            lib_files += rglob('*.rs', 'src/libs/rust/' + d)
        return lib_files
    except:
        # if that failed (e.g., jq not installed), just use all lib files
        return rglob('*.rs', 'src/libs/rust')

def ninja_custom_command(ninja, line) :
    cmd = os.path.splitext(os.path.basename(command[0]))[0]
    if cmd == 'mkm3fs':
        args = line.split()
        deps = rglob('*', args[2])
        deps.append(args[0])
        ninja.build(args[1], 'mkm3fs', None, deps = deps,
                    mkm3fs = args[0], dir = args[2], blocks = args[3], inodes = args[4], bpe = args[5])
        return True

    if cmd == 'byacc':
        args = line.split()
        out, flags = extract_binary_flag("-o", args[1:])
        files, flags = extract_non_flags(flags)
        ninja.build(out, 'byacc', files, byaccflags = flags, cmd = cmd)
        return True

    m = re.match('^cd (.*?) && cargo (.*?) && cp -f (.*?) (.*)', line)
    if m:
        tname = os.path.basename(m.group(1))
        target = os.path.abspath(m.group(4) + '/' + tname)
        target = target.replace(os.environ['PWD'] + '/', '')

        rust_files = get_rust_libfiles(m.group(1), tname)
        deps = rglob('*.rs', m.group(1)) + rust_files + get_m3_deps(target, ninja.targets)
        ninja.build(target, 'cargocp', deps = deps,
            dir = m.group(1), cpin = m.group(3), cpout = m.group(4), cargoflags = m.group(2).split())
        return True

    m = re.match('^cd (.*?) && cargo xbuild --target (\S+)(.*)', line)
    if m:
        tname = os.path.basename(m.group(1))
        triple = m.group(2)
        build = 'debug' if os.environ['M3_BUILD'] == 'debug' else 'release'
        rustbase = os.environ['CARGO_TARGET_DIR'] + '/' + triple + '/' + build

        target = rustbase + '/lib' + tname + '.a'
        target = target.replace(os.environ['PWD'] + '/', '')

        rust_files = get_rust_libfiles(m.group(1), tname)
        deps = rglob('*.rs', m.group(1)) + rust_files + get_m3_deps(target, ninja.targets)
        ninja.build(target, 'cargo', deps = deps,
            dir = m.group(1), cargoflags = ['xbuild', '--target', triple] + m.group(3).split())
        return True

    return False
