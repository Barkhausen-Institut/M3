#if defined(__x86_64__)
OUTPUT_FORMAT("elf64-x86-64")
#else
OUTPUT_FORMAT("elf32-littlearm")
#endif

ENTRY(_start)

PHDRS
{
    text    PT_LOAD;
    bss     PT_LOAD;
#if defined(__arm__)
    vectors PT_LOAD AT(0x0) FLAGS(0x7);
#endif
}

SECTIONS
{
#if defined(__arm__)
    .vectors :
    {
        // generate vector table
        LONG(0xEA000000 | (_entry_0 - (8 + 4 * 0) >> 2));
        LONG(0xEA000000 | (_entry_1 - (8 + 4 * 1) >> 2));
        LONG(0xEA000000 | (_entry_2 - (8 + 4 * 2) >> 2));
        LONG(0xEA000000 | (_entry_3 - (8 + 4 * 3) >> 2));
        LONG(0xEA000000 | (_entry_4 - (8 + 4 * 4) >> 2));
        LONG(0xE320F000);  // nop
        LONG(0xEA000000 | (_entry_6 - (8 + 4 * 6) >> 2));
        LONG(0xEA000000 | (_entry_7 - (8 + 4 * 7) >> 2));
    } : vectors = 0xE320F000
#endif

    . = 0x1000;

    .text :
    {
        *(.text*)
        *(.rodata*)
    } : text = 0x90909090

    .bss ALIGN(0x1000) :
    {
        *(COMMON*)
        *(.bss*)

        // rctmux flags
#if defined(__arm__)
        . = 0x3ff0;
#else
        . = 0x2ff0;
#endif
        PROVIDE(RCTMUX_FLAGS = .);
    } : bss

#if defined(__arm__)
    /DISCARD/ : {
        *(.ARM.exidx.*)
    }
#endif
}
