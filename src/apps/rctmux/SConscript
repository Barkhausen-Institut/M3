Import('env')

# define useful variables
archdir = 'arch/' + env['ARCH']
archdir_absolute = '#src/apps/rctmux/' + archdir

# t3
if env['ARCH'] == 't3':
    rctmux = env.M3Program(
        env,
        target = 'rctmux',
        source = [
            env['BINARYDIR'].abspath + '/Window.o',
            env.Glob('*.cc'),
            env.Glob(archdir + '/*.S'),
            env.Glob(archdir + '/*.cc'),
        ],
        NoSup = True,
        ldscript = File(archdir_absolute + '/link-elf32.ld'),
        libs = ['c', 'handler-reset', 'hal', 'handlers-sim']
    )
    env.Depends(rctmux, File(archdir_absolute + '/link-elf32.ld'))
# gem5
elif env['ARCH'] == 'gem5':
    myenv = env.Clone()

    # -O0 makes the code too large. Better use -Og here.
    myenv['CXXFLAGS'] = str(myenv['CXXFLAGS']).replace('-O0', '-Og')

    myenv.M3CPP('ld-final.conf', '#src/apps/rctmux/arch/gem5/ld.conf')

    myenv.M3Program(
        myenv,
        target = 'rctmux',
        source = [
            env.Glob('arch/gem5-$ISA/*.S'),
            env.Glob('arch/gem5-$ISA/*.cc'),
            env.Glob(archdir + '/*.S'),
            env.Glob(archdir + '/*.cc'),
            env.Glob('*.cc'),
        ],
        NoSup = True,
        varAddr = False,
        ldscript = myenv.File('ld-final.conf'),
        libs = ['gcc', 'c']
    )

# build test and dev programs
if env['ARCH'] == 't3' or env['ARCH'] == 'gem5':
    env.M3Program(env, 'rctmux-util-bench',      ['test-utils/bench.cc'])
    env.M3Program(env, 'rctmux-util-compute',    ['test-utils/compute.cc'])
    env.M3Program(env, 'rctmux-util-counter',    ['test-utils/counter.cc'])
    env.M3Program(env, 'rctmux-util-occupy',     ['test-utils/occupy.cc'])
    env.M3Program(env, 'rctmux-util-client',     ['test-utils/client.cc'])
    env.M3Program(env, 'rctmux-util-service',    ['test-utils/service.cc'])
    env.M3Program(env, 'rctmux-util-clitest',    ['test-utils/clitest.cc'])
    env.M3Program(env, 'rctmux-util-srvtest',    ['test-utils/srvtest.cc'])
    env.M3Program(env, 'rctmux-util-pipetest',   ['test-utils/pipetest.cc'])
    env.M3Program(env, 'rctmux-util-piperd',     ['test-utils/piperd.cc'])
    env.M3Program(env, 'rctmux-util-pipewr',     ['test-utils/pipewr.cc'])
