Import('env')

# check for byacc
def CheckBYACC(context):
    context.Message('Checking for byacc...')
    result = context.TryAction('byacc -V')[0]
    context.Result(result)
    return result

myenv = env.Clone()
conf = myenv.M3Config(custom_tests={'CheckBYACC': CheckBYACC})

# silence warnings
parseenv = myenv.Clone()
parseenv.Append(CFLAGS = ' -Wno-unused-parameter')
parserobj = parseenv.Object(source = 'parser.tab.c')

if conf.CheckBYACC():
    def GenParser(env, target, source):
        return env.Command(target, source, Action('byacc -B -d -o $TARGET $SOURCE'))

    parserc = GenParser(myenv, target = '#src/apps/shell/parser.tab.c', source = 'cmds.y')
    myenv.Depends(parserobj, parserc)
else:
    print('Cannot execute byacc, skipping regeneration of parser.tab.{c,h}...')

myenv.M3Program(myenv, target = 'shell', source = [myenv.Glob('*.cc'), parserobj])

conf.Finish()
