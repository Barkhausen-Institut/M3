TSORT(1)                           BSD General Commands Manual                           TSORT(1)

NAME
     tsort -- topological sort of a directed graph

SYNOPSIS
     tsort [-flqrvw] [-h file] [file]

DESCRIPTION
     tsort takes a list of pairs of node names representing directed arcs in a graph and prints
     the nodes in topological order on standard output.  That is, the input describes a partial
     ordering relation, from which tsort computes a total order compatible with this partial or-
     dering.

     Input is taken from the named file, or from standard input if no file is given.

     Node names in the input are separated by white space and there must be an even number of
     node names.

     Presence of a node in a graph can be represented by an arc from the node to itself.  This is
     useful when a node is not connected to any other nodes.

     If the graph contains a cycle (and therefore cannot be properly sorted), one of the arcs in
     the cycle is ignored and the sort continues.  Cycles are reported on standard error.

     The options are as follows:

     -f      Resolve ambiguities by selecting nodes based on the order of appearance of the first
             component of the pairs.

     -h file
             Use file, which holds an ordered list of nodes, to resolve ambiguities.  In case of
             duplicates, the first entry is chosen.

     -l      Search for and display the longest cycle.  Can take a very long time, as it may need
             to solve an NP-complete problem.

     -q      Do not display informational messages about cycles.  This is primarily intended for
             building libraries, where optimal ordering is not critical, and cycles occur often.

     -r      Reverse the ordering relation.

     -v      Inform on the exact number of edges broken while breaking cycles.  If a hints file
             was used, inform on seen nodes absent from that file.

     -w      Exit with exit code the number of cycles tsort had to break.

EXIT STATUS
     The tsort utility exits 0 on success, and >0 if an error occurs.

EXAMPLES
     Faced with the input:

           a b
           b c
           b d
           d f
           c e

     tsort outputs:

           a
           b
           c
           e
           d
           f

     which is one total ordering compatible with the individual relations.  There is no unicity,
     another compatible total ordering would be:

           a
           b
           c
           d
           e
           f

     tsort is commonly used to analyze dependencies and find a correct build order in a static
     way, whereas make(1) accomplishes the same task in a dynamic way.

SEE ALSO
     ar(1), lorder(1), make(1)

     Donald E. Knuth, The Art of Computer Programming, Vol. 1, pp. 258-268, 1973.

STANDARDS
     The tsort utility is compliant with the IEEE Std 1003.1-2008 ("POSIX.1") specification.

     The flags [-fhlqrvw] are extensions to that specification.

HISTORY
     A tsort command appeared in Version 7 AT&T UNIX.  This tsort command was completely rewrit-
     ten by Marc Espie for OpenBSD, to finally use the well-known optimal algorithms for topolog-
     ical sorting.

BSD                                       April 23, 2019                                      BSD
